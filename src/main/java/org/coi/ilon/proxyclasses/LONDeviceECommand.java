//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2021.11.26 at 02:58:11 PM IST 
//


package org.coi.ilon.proxyclasses;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for LON_Device_eCommand.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="LON_Device_eCommand"&gt;
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string"&gt;
 *     &lt;enumeration value="Reset"/&gt;
 *     &lt;enumeration value="ChangeApplicationStatus"/&gt;
 *     &lt;enumeration value="Wink"/&gt;
 *     &lt;enumeration value="ChangeCommissionStatus"/&gt;
 *     &lt;enumeration value="FetchProgId"/&gt;
 *     &lt;enumeration value="ImageDownload"/&gt;
 *     &lt;enumeration value="GetTemplate"/&gt;
 *     &lt;enumeration value="CpFileTransfer"/&gt;
 *     &lt;enumeration value="QueryStatus"/&gt;
 *     &lt;enumeration value="ClearStatus"/&gt;
 *     &lt;enumeration value="RepeatingData"/&gt;
 *     &lt;enumeration value="PowerlineData"/&gt;
 *     &lt;enumeration value="SendServicePin"/&gt;
 *     &lt;enumeration value="ProxyData"/&gt;
 *     &lt;enumeration value="UpdateCpDefaults"/&gt;
 *     &lt;enumeration value="FetchNeuronId"/&gt;
 *     &lt;enumeration value="PPNData"/&gt;
 *   &lt;/restriction&gt;
 * &lt;/simpleType&gt;
 * </pre>
 * 
 */
@XmlType(name = "LON_Device_eCommand")
@XmlEnum
public enum LONDeviceECommand {

    @XmlEnumValue("Reset")
    RESET("Reset"),
    @XmlEnumValue("ChangeApplicationStatus")
    CHANGE_APPLICATION_STATUS("ChangeApplicationStatus"),
    @XmlEnumValue("Wink")
    WINK("Wink"),
    @XmlEnumValue("ChangeCommissionStatus")
    CHANGE_COMMISSION_STATUS("ChangeCommissionStatus"),
    @XmlEnumValue("FetchProgId")
    FETCH_PROG_ID("FetchProgId"),
    @XmlEnumValue("ImageDownload")
    IMAGE_DOWNLOAD("ImageDownload"),
    @XmlEnumValue("GetTemplate")
    GET_TEMPLATE("GetTemplate"),
    @XmlEnumValue("CpFileTransfer")
    CP_FILE_TRANSFER("CpFileTransfer"),
    @XmlEnumValue("QueryStatus")
    QUERY_STATUS("QueryStatus"),
    @XmlEnumValue("ClearStatus")
    CLEAR_STATUS("ClearStatus"),
    @XmlEnumValue("RepeatingData")
    REPEATING_DATA("RepeatingData"),
    @XmlEnumValue("PowerlineData")
    POWERLINE_DATA("PowerlineData"),
    @XmlEnumValue("SendServicePin")
    SEND_SERVICE_PIN("SendServicePin"),
    @XmlEnumValue("ProxyData")
    PROXY_DATA("ProxyData"),
    @XmlEnumValue("UpdateCpDefaults")
    UPDATE_CP_DEFAULTS("UpdateCpDefaults"),
    @XmlEnumValue("FetchNeuronId")
    FETCH_NEURON_ID("FetchNeuronId"),
    @XmlEnumValue("PPNData")
    PPN_DATA("PPNData");
    private final String value;

    LONDeviceECommand(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static LONDeviceECommand fromValue(String v) {
        for (LONDeviceECommand c: LONDeviceECommand.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
